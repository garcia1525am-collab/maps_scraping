#!/usr/bin/env python3
"""
Script de instalaci√≥n y configuraci√≥n para Google Maps Scraper PRO
Versi√≥n 3.0 con persistencia avanzada y MySQL
"""

import os
import sys
import subprocess
import mysql.connector
from mysql.connector import Error

def print_banner():
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë         Google Maps Business Scraper PRO - Setup            ‚ïë
    ‚ïë              Versi√≥n 3.0 con Persistencia Avanzada          ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

def install_dependencies():
    """Instala las dependencias necesarias"""
    print("\nüîß Instalando dependencias de Python...")
    
    requirements = [
        "streamlit>=1.28.0",
        "pandas>=2.0.0",
        "plotly>=5.15.0",
        "selenium>=4.15.0",
        "undetected-chromedriver>=3.5.0",
        "mysql-connector-python>=8.1.0"
    ]
    
    for req in requirements:
        try:
            print(f"   üì¶ Instalando {req}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", req])
        except subprocess.CalledProcessError as e:
            print(f"   ‚ùå Error instalando {req}: {e}")
            return False
    
    print("‚úÖ Todas las dependencias instaladas correctamente")
    return True

def test_mysql_connection():
    """Prueba la conexi√≥n con MySQL"""
    print("\nüóÑÔ∏è Configuraci√≥n de MySQL (Opcional)")
    print("   Si no tienes MySQL, el sistema usar√° solo almacenamiento local")
    
    use_mysql = input("¬øDeseas configurar MySQL? (s/n): ").strip().lower()
    
    if use_mysql not in ['s', 'si', 's√≠', 'y', 'yes']:
        print("‚ÑπÔ∏è Saltando configuraci√≥n de MySQL. Se usar√° solo almacenamiento local.")
        return None
    
    print("\nüìã Ingresa los datos de conexi√≥n MySQL:")
    host = input("Host (localhost): ").strip() or "localhost"
    user = input("Usuario (root): ").strip() or "root"
    password = input("Contrase√±a: ").strip()
    database = input("Base de datos (google_maps_scraper): ").strip() or "google_maps_scraper"
    
    mysql_config = {
        'host': host,
        'user': user,
        'password': password,
        'database': database
    }
    
    print(f"\nüîç Probando conexi√≥n a MySQL...")
    
    try:
        # Intentar conectar sin especificar la base de datos primero
        connection = mysql.connector.connect(
            host=mysql_config['host'],
            user=mysql_config['user'],
            password=mysql_config['password']
        )
        
        if connection.is_connected():
            cursor = connection.cursor()
            
            # Crear la base de datos si no existe
            cursor.execute(f"CREATE DATABASE IF NOT EXISTS {mysql_config['database']} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci")
            print(f"‚úÖ Base de datos '{mysql_config['database']}' creada/verificada")
            
            cursor.close()
            connection.close()
            
            # Ahora conectar con la base de datos espec√≠fica
            connection = mysql.connector.connect(**mysql_config)
            
            if connection.is_connected():
                print("‚úÖ Conexi√≥n MySQL exitosa")
                
                # Crear tablas necesarias
                create_tables(connection)
                
                connection.close()
                return mysql_config
            
    except Error as e:
        print(f"‚ùå Error conectando a MySQL: {e}")
        print("üí° Verifica que MySQL est√© ejecut√°ndose y las credenciales sean correctas")
        print("üí° El sistema funcionar√° con almacenamiento local √∫nicamente")
        return None
    
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return None

def create_tables(connection):
    """Crea las tablas necesarias en MySQL"""
    print("üìä Creando tablas en MySQL...")
    
    try:
        cursor = connection.cursor()
        
        # Tabla para negocios
        create_businesses_table = """
        CREATE TABLE IF NOT EXISTS negocios (
            id INT AUTO_INCREMENT PRIMARY KEY,
            nombre VARCHAR(255) NOT NULL,
            calificacion DECIMAL(3,2) DEFAULT NULL,
            num_reviews VARCHAR(100) DEFAULT NULL,
            tipo VARCHAR(255) DEFAULT NULL,
            direccion TEXT DEFAULT NULL,
            telefono VARCHAR(50) DEFAULT NULL,
            website TEXT DEFAULT NULL,
            email VARCHAR(255) DEFAULT NULL,
            busqueda VARCHAR(255) NOT NULL,
            fecha_extraccion DATETIME NOT NULL,
            indice_original INT DEFAULT NULL,
            url_google_maps TEXT DEFAULT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            INDEX idx_busqueda (busqueda),
            INDEX idx_fecha_extraccion (fecha_extraccion),
            INDEX idx_nombre (nombre),
            INDEX idx_calificacion (calificacion)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        """
        
        # Tabla para historial de b√∫squedas
        create_searches_table = """
        CREATE TABLE IF NOT EXISTS historial_busquedas (
            id INT AUTO_INCREMENT PRIMARY KEY,
            busqueda VARCHAR(255) NOT NULL,
            url TEXT NOT NULL,
            resultados INT NOT NULL,
            fecha DATETIME NOT NULL,
            parametros JSON DEFAULT NULL,
            duracion_segundos INT DEFAULT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            INDEX idx_busqueda (busqueda),
            INDEX idx_fecha (fecha)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        """
        
        # Tabla para respaldos autom√°ticos
        create_backups_table = """
        CREATE TABLE IF NOT EXISTS respaldos_sesion (
            id INT AUTO_INCREMENT PRIMARY KEY,
            session_id VARCHAR(100) NOT NULL,
            datos JSON NOT NULL,
            timestamp DATETIME NOT NULL,
            tipo_respaldo ENUM('auto', 'manual') DEFAULT 'auto',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            INDEX idx_session_id (session_id),
            INDEX idx_timestamp (timestamp)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        """
        
        cursor.execute(create_businesses_table)
        cursor.execute(create_searches_table)
        cursor.execute(create_backups_table)
        
        connection.commit()
        cursor.close()
        
        print("‚úÖ Tablas creadas exitosamente en MySQL")
        return True
        
    except Error as e:
        print(f"‚ùå Error creando tablas: {e}")
        return False

def create_config_file(mysql_config):
    """Crea archivo de configuraci√≥n"""
    print("\nüìÅ Creando archivo de configuraci√≥n...")
    
    config = {
        'mysql_config': mysql_config,
        'auto_save_enabled': True,
        'default_max_results': 15,
        'auto_save_interval_seconds': 120,
        'data_directory': 'session_data'
    }
    
    try:
        import json
        with open('config.json', 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False, default=str)
        
        print("‚úÖ Archivo config.json creado")
        return True
        
    except Exception as e:
        print(f"‚ùå Error creando configuraci√≥n: {e}")
        return False

def create_directories():
    """Crea directorios necesarios"""
    print("\nüìÇ Creando directorios necesarios...")
    
    directories = [
        'session_data',
        'exports',
        'logs',
        'temp_chrome_profiles'
    ]
    
    for directory in directories:
        try:
            os.makedirs(directory, exist_ok=True)
            print(f"   üìÅ {directory}/")
        except Exception as e:
            print(f"   ‚ùå Error creando {directory}: {e}")
            return False
    
    print("‚úÖ Directorios creados exitosamente")
    return True

def check_chrome():
    """Verifica que Chrome est√© instalado"""
    print("\nüåê Verificando instalaci√≥n de Chrome...")
    
    try:
        import undetected_chromedriver as uc
        
        # Intentar crear una instancia temporal
        options = uc.ChromeOptions()
        options.add_argument("--headless")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        
        driver = uc.Chrome(options=options)
        driver.quit()
        
        print("‚úÖ Chrome y ChromeDriver funcionando correctamente")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è Problema con Chrome/ChromeDriver: {e}")
        print("üí° El scraper intentar√° descargar ChromeDriver autom√°ticamente")
        return True  # Continuar de todas formas

def create_run_scripts():
    """Crea scripts de ejecuci√≥n"""
    print("\nüìù Creando scripts de ejecuci√≥n...")
    
    # Script para Streamlit
    streamlit_script = """#!/bin/bash
# Script para ejecutar la interfaz Streamlit
echo "üöÄ Iniciando Google Maps Scraper PRO - Interfaz Web"
echo "üì± La aplicaci√≥n se abrir√° en tu navegador web"
echo "üîó URL local: http://localhost:8501"
echo ""

streamlit run streamlit_app_enhanced.py --theme.base="light" --theme.primaryColor="#667eea"
"""
    
    # Script para l√≠nea de comandos
    cli_script = """#!/bin/bash
# Script para ejecutar el scraper en l√≠nea de comandos
echo "üñ•Ô∏è Iniciando Google Maps Scraper PRO - L√≠nea de Comandos"
echo ""

python scraper_enhanced.py
"""
    
    try:
        with open('run_streamlit.sh', 'w') as f:
            f.write(streamlit_script)
        os.chmod('run_streamlit.sh', 0o755)
        
        with open('run_cli.sh', 'w') as f:
            f.write(cli_script)
        os.chmod('run_cli.sh', 0o755)
        
        # Scripts para Windows
        with open('run_streamlit.bat', 'w') as f:
            f.write("@echo off\necho Iniciando interfaz web...\nstreamlit run streamlit_app_enhanced.py\npause\n")
        
        with open('run_cli.bat', 'w') as f:
            f.write("@echo off\necho Iniciando scraper CLI...\npython scraper_enhanced.py\npause\n")
        
        print("‚úÖ Scripts de ejecuci√≥n creados:")
        print("   üì± run_streamlit.sh/.bat - Interfaz web")
        print("   üñ•Ô∏è run_cli.sh/.bat - L√≠nea de comandos")
        return True
        
    except Exception as e:
        print(f"‚ùå Error creando scripts: {e}")
        return False

def show_usage_instructions():
    """Muestra las instrucciones de uso"""
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                    INSTALACI√ìN COMPLETADA                   ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    
    üéâ ¬°El sistema ha sido configurado exitosamente!
    
    üìã FORMAS DE EJECUTAR EL SCRAPER:
    
    1Ô∏è‚É£ INTERFAZ WEB (Recomendado):
       ‚Ä¢ Linux/Mac: ./run_streamlit.sh
       ‚Ä¢ Windows: run_streamlit.bat
       ‚Ä¢ Manual: streamlit run streamlit_app_enhanced.py
    
    2Ô∏è‚É£ L√çNEA DE COMANDOS:
       ‚Ä¢ Linux/Mac: ./run_cli.sh  
       ‚Ä¢ Windows: run_cli.bat
       ‚Ä¢ Manual: python scraper_enhanced.py
    
    üîß CARACTER√çSTICAS PRINCIPALES:
    
    ‚úÖ Auto-guardado cada 5 negocios extra√≠dos
    ‚úÖ Respaldo autom√°tico cada 2 minutos
    ‚úÖ Recuperaci√≥n de sesiones por ID
    ‚úÖ Almacenamiento local + MySQL (opcional)
    ‚úÖ Manejo de interrupciones del sistema
    ‚úÖ Exportaci√≥n m√∫ltiple (CSV, por b√∫squeda, etc.)
    ‚úÖ Interfaz web moderna e intuitiva
    
    üõ°Ô∏è NUNCA M√ÅS PERDER√ÅS TUS DATOS
    
    üìÅ ARCHIVOS IMPORTANTES:
    
    ‚Ä¢ database_manager.py - Gestor de MySQL y persistencia
    ‚Ä¢ scraper_enhanced.py - Scraper con auto-guardado  
    ‚Ä¢ streamlit_app_enhanced.py - Interfaz web moderna
    ‚Ä¢ config.json - Configuraci√≥n del sistema
    ‚Ä¢ session_data/ - Respaldos autom√°ticos locales
    
    üîç EJEMPLOS DE URLs V√ÅLIDAS:
    
    ‚Ä¢ Restaurantes: https://www.google.com/maps/search/restaurantes+cdmx/@19.4326,-99.1332,13z
    ‚Ä¢ Dentistas: https://www.google.com/maps/search/dentistas+cerca+de+mi/@lat,lng,15z
    ‚Ä¢ Hoteles: https://www.google.com/maps/search/hoteles+cancun/@21.1619,-86.8515,12z
    
    ‚ö†Ô∏è IMPORTANTE:
    
    ‚Ä¢ Usa el scraper responsablemente
    ‚Ä¢ Respeta los t√©rminos de servicio de Google
    ‚Ä¢ Haz pausas entre b√∫squedas grandes
    ‚Ä¢ Mant√©n actualizadas las dependencias
    
    üÜò SOPORTE Y PROBLEMAS:
    
    ‚Ä¢ Los datos se guardan autom√°ticamente cada 5 negocios
    ‚Ä¢ Si se interrumpe el proceso, usa el mismo ID de sesi√≥n para continuar
    ‚Ä¢ Los respaldos locales est√°n en session_data/
    ‚Ä¢ Para problemas con Chrome, reinstala undetected-chromedriver
    
    ¬°Disfruta extrayendo datos de Google Maps sin preocuparte por perderlos!
    """)

def main():
    """Funci√≥n principal del setup"""
    print_banner()
    
    # Verificar Python
    if sys.version_info < (3, 8):
        print("‚ùå Se requiere Python 3.8 o superior")
        print(f"   Tu versi√≥n: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
    
    # Pasos de instalaci√≥n
    steps = [
        ("Instalar dependencias", install_dependencies),
        ("Crear directorios", create_directories),
        ("Verificar Chrome", check_chrome),
        ("Configurar MySQL", test_mysql_connection),
        ("Crear scripts", create_run_scripts)
    ]
    
    mysql_config = None
    
    for step_name, step_function in steps:
        print(f"\n{'='*60}")
        print(f"üìã {step_name}")
        print('='*60)
        
        if step_function == test_mysql_connection:
            result = step_function()
            if result:
                mysql_config = result
                create_config_file(mysql_config)
        else:
            result = step_function()
            
        if result is False:
            print(f"\n‚ùå Fall√≥ el paso: {step_name}")
            print("üí° Revisa los errores anteriores e intenta de nuevo")
            return False
    
    # Mostrar instrucciones finales
    show_usage_instructions()
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\nüéä ¬°Setup completado exitosamente!")
            print("üöÄ Ya puedes ejecutar el scraper usando los scripts creados")
        else:
            print("\n‚ùå Setup incompleto")
            print("üí° Revisa los errores y ejecuta de nuevo")
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Setup cancelado por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado durante el setup: {e}")
        print("üí° Contacta al soporte t√©cnico")